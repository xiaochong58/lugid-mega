import { EventEmitter } from 'events';
declare type EventListener = (...args: any[]) => void;
export default class Listener<T extends string> {
    events: EventEmitter;
    constructor();
    on(eventName: T, cb: EventListener): {
        removeListener: () => void;
    };
    once(eventName: T, cb: EventListener): {
        removeListener: () => void;
    };
    emit(eventName: T, param: any): void;
    takeEventData(eventName: T, time: number): Promise<unknown[]>;
    fromEvent(eventName: T): import("rxjs").Observable<unknown>;
    delegate(eventName: T, listener: Listener<any>): {
        removeListener: () => void;
    };
    take(eventName: T, count: number): Promise<unknown>;
    awaitEvent(eventName: T): Promise<any>;
}
export {};
