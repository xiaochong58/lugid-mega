"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 *
 * create by ligx
 *
 * @flow
 */
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var events_1 = require("events");
var Listener = /** @class */ (function () {
    function Listener() {
        this.events = new events_1.EventEmitter();
        this.events.setMaxListeners(5000);
    }
    Listener.prototype.on = function (eventName, cb) {
        var _this = this;
        this.events.on(eventName, cb);
        var removeListener = function () {
            _this.events.removeListener(eventName, cb);
        };
        return {
            removeListener: removeListener,
        };
    };
    Listener.prototype.once = function (eventName, cb) {
        var _this = this;
        this.events.once(eventName, cb);
        var removeListener = function () {
            _this.events.removeListener(eventName, cb);
        };
        return {
            removeListener: removeListener,
        };
    };
    Listener.prototype.emit = function (eventName, param) {
        this.events.emit(eventName, param);
    };
    Listener.prototype.takeEventData = function (eventName, time) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.fromEvent(eventName)
                        .pipe(operators_1.bufferTime(time), operators_1.first())
                        .toPromise()];
            });
        });
    };
    Listener.prototype.fromEvent = function (eventName) {
        return rxjs_1.fromEvent(this.events, eventName);
    };
    Listener.prototype.delegate = function (eventName, listener) {
        var _this = this;
        return listener.on(eventName, function (param) {
            _this.emit(eventName, param);
        });
    };
    Listener.prototype.take = function (eventName, count) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.fromEvent(eventName)
                        .pipe(operators_1.take(count))
                        .toPromise()];
            });
        });
    };
    Listener.prototype.awaitEvent = function (eventName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (res) {
                        _this.once(eventName, function () {
                            var param = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                param[_i] = arguments[_i];
                            }
                            res.apply(void 0, param);
                        });
                    })];
            });
        });
    };
    return Listener;
}());
exports.default = Listener;
//# sourceMappingURL=index.js.map