"use strict";
/**
 *
 * create by ligx
 *
 * @flow
 */
Object.defineProperty(exports, "__esModule", { value: true });
function limitByConfig(val, opt) {
    var max = opt.max, min = opt.min;
    return Math.min(Math.max(min, val), max);
}
exports.limitByConfig = limitByConfig;
function fixed(val, fixCnt) {
    var fix = Math.pow(10, fixCnt);
    var res = (val * fix) / fix;
    return Number(res.toFixed(fixCnt));
}
exports.fixed = fixed;
function isInLimit(val, range) {
    return limit(val, range) === val;
}
exports.isInLimit = isInLimit;
function limit(val, range) {
    var _a = getMinAndMax(range), min = _a.min, max = _a.max;
    return Math.min(max, Math.max(val, min));
}
exports.limit = limit;
function limitToSet(val, range) {
    var _a = getMinAndMax(range), min = _a.min, max = _a.max;
    var obj = {};
    return val.sort(sortable).filter(function (i) {
        if (!(i in obj)) {
            obj[i] = i;
            return i >= min && i <= max;
        }
    });
}
exports.limitToSet = limitToSet;
function valueInRange(val, range) {
    var _a = getMinAndMax(range), min = _a.min, max = _a.max;
    return val >= min && val <= max;
}
exports.valueInRange = valueInRange;
function getMinAndMax(range) {
    var min = range[0];
    var max = range[0];
    function check(val, negative) {
        if (negative === void 0) { negative = false; }
        return val !== undefined ? val : negative ? -Infinity : Infinity;
    }
    range &&
        range.forEach(function (item) {
            min = Math.min(item, min);
            max = Math.max(item, max);
        });
    return { min: check(min, true), max: check(max) };
}
exports.getMinAndMax = getMinAndMax;
function sortable(a, b) {
    return a - b;
}
exports.sortable = sortable;
function accAdd(value, step, precision) {
    return Number((value + step).toFixed(precision));
}
exports.accAdd = accAdd;
function checkNumber(value) {
    if (!value)
        return '';
    return value
        .replace(/[^\d\.-]/g, '')
        .replace(/^-/g, '$%$')
        .replace(/\-/g, '')
        .replace('.', '$#$')
        .replace(/\./g, '')
        .replace('$#$', '.')
        .replace('$%$', '-');
}
exports.checkNumber = checkNumber;
//# sourceMappingURL=index.js.map