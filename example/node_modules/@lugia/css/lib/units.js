"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// @ts-ignore
var debug_1 = tslib_1.__importDefault(require("debug/dist/debug"));
var debug = debug_1.default('lugia-theme:font');
var footerFontSize = 10;
if (typeof document !== 'undefined') {
    var body = document.body;
    if (body) {
        footerFontSize = getFontSize(body.parentElement, 10);
        if (body && body.parentElement) {
            body.parentElement.style.fontSize = number2px(footerFontSize);
        }
        debug('footerFontSize %s', footerFontSize);
    }
}
function getFontSize(domNode, defaultFontSize) {
    if (!domNode) {
        return defaultFontSize;
    }
    return px2Number(getComputedStyle(domNode).fontSize) || defaultFontSize;
}
exports.getFontSize = getFontSize;
function px2rem(px) {
    return px / footerFontSize;
}
exports.px2rem = px2rem;
function px2remcss(px) {
    return px2rem(px) + "rem";
}
exports.px2remcss = px2remcss;
function rem2em(rem, emMultipleForRem) {
    return rem / emMultipleForRem;
}
exports.rem2em = rem2em;
function getEmMultipleForRem(fontSize) {
    var defaultResult = 1;
    if (!fontSize) {
        return defaultResult;
    }
    if (typeof fontSize === 'string' && fontSize.indexOf('rem') !== -1) {
        var rem = rem2Number(fontSize);
        if (rem) {
            return rem;
        }
    }
    var fontNumber = px2Number(fontSize);
    if (!isNaN(fontNumber)) {
        return fontNumber / footerFontSize;
    }
    return defaultResult;
}
exports.getEmMultipleForRem = getEmMultipleForRem;
function px2emcss(emMultipleForRem) {
    return function (px) { return px2rem(px) / emMultipleForRem + "em"; };
}
exports.px2emcss = px2emcss;
function px2Number(str) {
    return unitString2Number(str, 'px');
}
exports.px2Number = px2Number;
function rem2Number(str) {
    return unitString2Number(str, 'rem');
}
exports.rem2Number = rem2Number;
function number2px(num) {
    return number2UnitString(num, 'px');
}
exports.number2px = number2px;
function number2rem(num) {
    return number2UnitString(num, 'rem');
}
exports.number2rem = number2rem;
function unitString2Number(str, unit) {
    if (!str) {
        return 0;
    }
    if (typeof str !== 'string') {
        return Number(str);
    }
    if (str.indexOf(unit) === -1) {
        return Number(str);
    }
    return Number(str.replace(new RegExp(unit, 'g'), ''));
}
function number2UnitString(num, unit) {
    return "" + num + unit;
}
function getSizeByStyle(style) {
    if (!style) {
        return { width: 0, height: 0 };
    }
    var _a = style.width, width = _a === void 0 ? '0px' : _a, _b = style.height, height = _b === void 0 ? '0px' : _b;
    return { width: px2Number(width), height: px2Number(height) };
}
exports.getSizeByStyle = getSizeByStyle;
function size2Style(size) {
    if (!size) {
        return {};
    }
    var width = size.width, height = size.height;
    return {
        width: number2px(width),
        height: number2px(height),
    };
}
exports.size2Style = size2Style;
function getPointByStyle(style) {
    if (!style) {
        return [0, 0];
    }
    var _a = style.left, left = _a === void 0 ? '0px' : _a, _b = style.top, top = _b === void 0 ? '0px' : _b;
    return [px2Number(left), px2Number(top)];
}
exports.getPointByStyle = getPointByStyle;
function point2Style(point) {
    if (!point) {
        return {};
    }
    var x = point[0], y = point[1];
    return {
        left: number2px(x),
        top: number2px(y),
    };
}
exports.point2Style = point2Style;
//# sourceMappingURL=units.js.map