"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function tillMethodAttribute(target) {
    var events = {};
    target &&
        Object.keys(target).reduce(function (pre, current) {
            if (typeof target[current] === 'function') {
                var config = pre[current];
                if (!config) {
                    pre[current] = config = [];
                }
                config.push(target[current]);
            }
            return pre;
        }, events);
    return events;
}
exports.tillMethodAttribute = tillMethodAttribute;
function combineMethodObject() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    var res = {};
    if (!rest) {
        return res;
    }
    var valuesObjects = rest.map(function (param) {
        return tillMethodAttribute(param);
    });
    var keyObj = {};
    valuesObjects.forEach(function (obj) {
        Object.keys(obj).forEach(function (key) { return (keyObj[key] = true); });
    });
    Object.keys(keyObj).forEach(function (key) {
        var values = [];
        valuesObjects.forEach(function (methodConfig) {
            var value = methodConfig[key];
            if (value) {
                Array.prototype.push.apply(values, value);
            }
        });
        res[key] = values;
    });
    return res;
}
exports.combineMethodObject = combineMethodObject;
function combineFunction(param) {
    var targets = param.targets, _a = param.option, option = _a === void 0 ? {} : _a;
    var returned = option.returned;
    var combineObj = combineMethodObject.apply(void 0, targets);
    var res = {};
    Object.keys(combineObj).forEach(function (key) {
        var method = combineObj[key];
        res[key] = function () {
            var rest = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                rest[_i] = arguments[_i];
            }
            var result;
            method &&
                method.forEach(function (call) {
                    var callResult = call.apply(void 0, rest);
                    if (returned && returned[key] === call) {
                        result = callResult;
                    }
                });
            return result;
        };
    });
    return res;
}
exports.combineFunction = combineFunction;
//# sourceMappingURL=index.js.map