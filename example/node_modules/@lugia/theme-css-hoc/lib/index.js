"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var theme_core_1 = require("@lugia/theme-core");
var react_1 = tslib_1.__importStar(require("react"));
var object_utils_1 = require("@lugia/object-utils");
var styled_components_1 = require("styled-components");
exports.css = styled_components_1.css;
exports.keyframes = styled_components_1.keyframes;
var cssconfig_1 = require("./extractor/cssconfig");
var common_1 = require("./extractor/themeprops/common");
var css_1 = require("./extractor/themeprops/css");
function getClassName(cssConfigClassName, props) {
    var className = props.className;
    // @ts-ignore
    cssConfigClassName = !window.__lugia__enabledClassNameBool__
        ? ''
        : cssConfigClassName;
    if (className) {
        return className + " " + cssConfigClassName;
    }
    return cssConfigClassName;
}
var CSSComponent2CSSConfig = new WeakMap();
function useInitHandle(props, widgetName, isHasThemeStateEvent) {
    var handle = react_1.useRef(undefined);
    var _a = react_1.useState({
        hover: false,
        focus: false,
        active: false,
        disabled: false,
    }), themeState = _a[0], setThemeState = _a[1];
    var themeProps = props.themeProps;
    var propsThemeState = themeProps.themeState;
    if (propsThemeState) {
        var finalState = tslib_1.__assign(tslib_1.__assign({}, themeState), propsThemeState);
        var disabled = finalState.disabled, hover = finalState.hover, focus_1 = finalState.focus, active = finalState.active;
        var sDisabled = themeState.disabled, sHover = themeState.hover, sFocus = themeState.focus, sActive = themeState.active;
        if (disabled !== sDisabled ||
            hover !== sHover ||
            focus_1 !== sFocus ||
            sActive !== active) {
            setThemeState(finalState);
        }
    }
    if (isHasThemeStateEvent && !handle.current) {
        handle.current = new theme_core_1.ThemeStateHandle(props, widgetName, themeState);
    }
    if (handle.current) {
        handle.current.setProps(props);
    }
    return {
        handle: handle.current,
        themeState: [themeState, setThemeState],
    };
}
function extendCSSComponent(cssConfig) {
    var extend = cssConfig.extend;
    if (extend) {
        if (extend.__OrginalWidget__) {
            throw new Error('Not support extend ThemeHoc Component!');
        }
        var extendCSSConfig = CSSComponent2CSSConfig.get(extend);
        if (extendCSSConfig) {
            var className = cssConfig.className;
            cssConfig = tslib_1.__assign({ className: className }, object_utils_1.deepMergeForArrayMerge(extendCSSConfig, cssConfig));
            cssconfig_1.filterRepeatCSSConfigSelectNames(cssConfig);
            var newExtendConfig = tslib_1.__assign({}, cssConfig);
            delete newExtendConfig.extend;
            return CSSComponent(newExtendConfig);
        }
    }
}
/**
 * @return {undefined}
 */
function CSSComponent(cssConfig) {
    var className = cssConfig.className;
    if (!className) {
        console.trace('className is empty!');
    }
    var extendResult = extendCSSComponent(cssConfig);
    if (extendResult) {
        return extendResult;
    }
    var styledElement = cssconfig_1.getStyledComponent(cssConfig);
    var getCSSInCSSConfig = css_1.createGetCSSInCSSConfig(cssConfig);
    var getStyleInCSSConfig = css_1.createGetStyleInCSSConfig(cssConfig);
    var getStyleInCSSConfigDefaultTheme = css_1.createGetDefaultThemeInCSSConfig(cssConfig);
    var getRenderTargetByGetCSSInThemeMeta = createGetRenderTargetByGetCSSInThemeMeta();
    var getDefaultStyle = getStyleInCSSConfigDefaultTheme
        ? getStyleInCSSConfigDefaultTheme
        : undefined;
    var getStyleByThemeMeta = common_1.createGetStyleInThemeMeta(cssConfig);
    var computeInLineStyle = function (props) {
        return tslib_1.__assign({ styleInCSSConfig: getStyleInCSSConfig(props) }, getStyleByThemeMeta(props));
    };
    var cssVal = cssConfig.css, _a = cssConfig.option, option = _a === void 0 ? { hover: false, focus: false, active: false } : _a;
    var isHasThemeStateEvent = theme_core_1.hasThemeStateEvent(option);
    function getTargetComponent(targetStyleComponent) {
        var result = targetStyleComponent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n    ", "\n    ", "\n    ", "\n    ", "\n  "], ["\n    ", "\n    ", "\n    ", "\n    ", "\n  "])), cssVal, css_1.createGetCSSByStyleTranslate(getDefaultStyle), getCSSInCSSConfig, getRenderTargetByGetCSSInThemeMeta);
        result.displayName = theme_core_1.CSSComponentDisplayName;
        return result;
    }
    var Target = getTargetComponent(styledElement);
    var hasStaticHover = !object_utils_1.isEmptyObject(cssConfig.hover);
    var hasStaticFocus = !object_utils_1.isEmptyObject(cssConfig.focus);
    var hasStaticActive = !object_utils_1.isEmptyObject(cssConfig.active);
    var ResultForward = function (props, ref) {
        var _a = useInitHandle(props, className, isHasThemeStateEvent), handle = _a.handle, _b = _a.themeState, themeState = _b[0], setThemeState = _b[1];
        var targetProps = tslib_1.__assign({}, props);
        targetProps.themeProps = object_utils_1.deepMerge(targetProps.themeProps, { themeState: themeState });
        if ('disabled' in targetProps) {
            var disabledVal = targetProps.disabled;
            targetProps.themeProps = object_utils_1.deepMerge(targetProps.themeProps, {
                themeState: { disabled: disabledVal },
            });
        }
        var _c = computeInLineStyle(targetProps), _d = _c.normal, normal = _d === void 0 ? {} : _d, _e = _c.hover, hover = _e === void 0 ? {} : _e, _f = _c.focus, focus = _f === void 0 ? {} : _f, _g = _c.active, active = _g === void 0 ? {} : _g, _h = _c.disabled, disabled = _h === void 0 ? {} : _h, _j = _c.styleInCSSConfig, styleInCSSConfig = _j === void 0 ? {} : _j, _k = _c.themeMeta, themeMeta = _k === void 0 ? {} : _k;
        react_1.useEffect(function () {
            var themeProps = props.themeProps;
            var onLugia = themeProps.onLugia;
            if (isHasThemeStateEvent && handle) {
                onLugia = handle.on;
            }
            var themeConfig = themeProps.themeConfig;
            var unsubscribeHover = onLugia &&
                onLugia('hover', function (data) {
                    if (hasStaticHover ||
                        (themeConfig && !object_utils_1.isEmptyObject(themeConfig.hover))) {
                        setThemeState(tslib_1.__assign(tslib_1.__assign({}, themeState), data));
                    }
                });
            var unsubscribeFocus = onLugia &&
                onLugia('focus', function (data) {
                    if (hasStaticFocus ||
                        (themeConfig && !object_utils_1.isEmptyObject(themeConfig.focus))) {
                        setThemeState(tslib_1.__assign(tslib_1.__assign({}, themeState), data));
                    }
                });
            var unsubscribeActive = onLugia &&
                onLugia('active', function (data) {
                    if (hasStaticActive ||
                        (themeConfig && !object_utils_1.isEmptyObject(themeConfig.active))) {
                        setThemeState(tslib_1.__assign(tslib_1.__assign({}, themeState), data));
                    }
                });
            if (!onLugia) {
                console.error(cssConfig.className + " onLugia is not found \uFF01");
            }
            return function () {
                unsubscribeHover && unsubscribeHover();
                unsubscribeFocus && unsubscribeFocus();
                unsubscribeActive && unsubscribeActive();
            };
        }, [handle ? handle.on : undefined, props, setThemeState, themeState]);
        var targetStyle = object_utils_1.deepMerge(normal, hover, focus, active, disabled, styleInCSSConfig);
        var themePropsVal = targetProps.themeProps;
        return (react_1.default.createElement(Target, tslib_1.__assign({}, props, theme_core_1.injectThemeStateEvent(option, handle), { themeProps: themePropsVal, __themeMeta: themeMeta, style: targetStyle, __cssName: className, className: getClassName(className, props), ref: ref })));
    };
    var Result = react_1.default.forwardRef(ResultForward);
    CSSComponent2CSSConfig.set(Result, cssConfig);
    Result.displayName = theme_core_1.CSSComponentContainerDisplayName;
    return Result;
}
exports.default = CSSComponent;
function createGetRenderTargetByGetCSSInThemeMeta() {
    return function (cssProps) {
        var themeProps = cssProps.themeProps;
        var _a = themeProps.themeConfig, themeConfig = _a === void 0 ? {} : _a;
        var cssArray = [];
        var themeState = themeProps.themeState;
        common_1.getStateTypes(themeState).map(function (stateType) {
            var _a = themeConfig, _b = stateType, themeMeta = _a[_b];
            if (!themeMeta) {
                return;
            }
            var getCSS = themeMeta.getCSS;
            if (getCSS) {
                cssArray.push(getCSS(themeMeta, themeProps));
            }
        });
        return cssArray;
    };
}
function packClassName(Target, className) {
    return react_1.default.forwardRef(function (props, ref) { return (react_1.default.createElement(Target, tslib_1.__assign({}, props, { className: getClassName(className, props), ref: ref }))); });
}
function StaticComponent(config) {
    var styledElement = cssconfig_1.getStyledComponent(config);
    var cssConfig = config.css, className = config.className;
    return packClassName(styledElement(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n    ", "\n  "], ["\n    ", "\n  "])), cssConfig), className);
}
exports.StaticComponent = StaticComponent;
var templateObject_1, templateObject_2;
//# sourceMappingURL=index.js.map