"use strict";
/**
 *
 * create by ligx
 *
 * @flow
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var styled_components_1 = tslib_1.__importDefault(require("styled-components"));
function filterRepeatCSSConfigSelectNames(outCSSConfig) {
    if (!outCSSConfig) {
        return;
    }
    var normal = outCSSConfig.normal, hover = outCSSConfig.hover, disabled = outCSSConfig.disabled, active = outCSSConfig.active, focus = outCSSConfig.focus;
    normal && filterRepeatCSSMetaSelectNames(normal);
    hover && filterRepeatCSSMetaSelectNames(hover);
    disabled && filterRepeatCSSMetaSelectNames(disabled);
    active && filterRepeatCSSMetaSelectNames(active);
    focus && filterRepeatCSSMetaSelectNames(focus);
}
exports.filterRepeatCSSConfigSelectNames = filterRepeatCSSConfigSelectNames;
function filterRepeatCSSMetaSelectNames(outCSSMeta) {
    if (!outCSSMeta) {
        return;
    }
    var selectNames = outCSSMeta.selectNames;
    if (selectNames && selectNames.length > 0) {
        outCSSMeta.selectNames = filterRepeatSelectNames(selectNames);
    }
}
exports.filterRepeatCSSMetaSelectNames = filterRepeatCSSMetaSelectNames;
function filterRepeatSelectNames(selNames) {
    if (!selNames) {
        return selNames;
    }
    var exist = {};
    return selNames.filter(function (path) {
        var key = typeof path === 'string' ? path : path.join('.');
        var isExist = !exist[key];
        exist[key] = true;
        return isExist;
    });
}
exports.filterRepeatSelectNames = filterRepeatSelectNames;
function getStyledComponent(cssConfig) {
    var _a = cssConfig.tag, tag = _a === void 0 ? 'span' : _a, extend = cssConfig.extend;
    if (extend) {
        return styled_components_1.default(extend);
    }
    var styledElement = styled_components_1.default[tag];
    if (!styledElement) {
        throw new Error("Not support tag: " + tag);
    }
    return styledElement;
}
exports.getStyledComponent = getStyledComponent;
//# sourceMappingURL=cssconfig.js.map