"use strict";
/**
 *
 * create by ligx
 *
 * @flow
 */
Object.defineProperty(exports, "__esModule", { value: true });
var theme_core_1 = require("@lugia/theme-core");
var consts_1 = require("../../consts");
var css_1 = require("../../translate/css");
var object_utils_1 = require("@lugia/object-utils");
function getStateTypes(themeState) {
    if (themeState === void 0) { themeState = {}; }
    var res = [consts_1.Normal];
    var _a = themeState.hover, hover = _a === void 0 ? false : _a, _b = themeState.disabled, disabled = _b === void 0 ? false : _b, _c = themeState.active, active = _c === void 0 ? false : _c, _d = themeState.focus, focus = _d === void 0 ? false : _d;
    if (hover) {
        res.push(consts_1.Hover);
    }
    if (focus) {
        res.push(consts_1.Focus);
    }
    if (active) {
        res.push(consts_1.Active);
    }
    if (disabled) {
        res.push(consts_1.Disabled);
    }
    return res;
}
exports.getStateTypes = getStateTypes;
var allState = [consts_1.Normal, consts_1.Hover, consts_1.Active, consts_1.Disabled];
function getTargetThemeMeta(cssConfig, themeProps, stateType) {
    var _a = themeProps.themeConfig, themeConfig = _a === void 0 ? {} : _a;
    var _b = themeConfig, _c = stateType, _d = _b[_c], themeMeta = _d === void 0 ? {} : _d;
    var _e = cssConfig, _f = stateType, _g = _e[_f], cssConfigThemeMeta = _g === void 0 ? {} : _g;
    var getThemeMeta = cssConfigThemeMeta.getThemeMeta;
    if (getThemeMeta) {
        var getThemeMetaRes = getThemeMeta(themeMeta, themeProps) || {};
        themeMeta = object_utils_1.deepMerge(getThemeMetaRes, themeMeta);
    }
    var getThemeMetaByUserDef = themeMeta.getThemeMeta;
    if (getThemeMetaByUserDef) {
        themeMeta = object_utils_1.deepMerge(themeMeta, getThemeMetaByUserDef(themeMeta, themeProps));
    }
    return themeMeta;
}
function getDefaultTheme(defaultCSSConfig, stateType) {
    var _a = defaultCSSConfig, _b = stateType, _c = _a[_b], config = _c === void 0 ? {} : _c;
    var _d = config.defaultTheme, defaultTheme = _d === void 0 ? {} : _d;
    return defaultTheme;
}
function createGetStyleInThemeMeta(cssConfig) {
    var stateType2Getter = {
        normal: css_1.translateToCSStyle(cssConfig, consts_1.Normal),
        active: css_1.translateToCSStyle(cssConfig, consts_1.Active),
        hover: css_1.translateToCSStyle(cssConfig, consts_1.Hover),
        focus: css_1.translateToCSStyle(cssConfig, consts_1.Focus),
        disabled: css_1.translateToCSStyle(cssConfig, consts_1.Disabled),
    };
    return function (props) {
        var themeProps = props.themeProps;
        var themeState = themeProps.themeState, _a = themeProps.themeConfig, themeConfig = _a === void 0 ? {} : _a;
        var stateTypes = getStateTypes(themeState);
        var themeMetaForDesign = allState.reduce(function (result, stateType) {
            var themeMeta = getTargetThemeMeta(cssConfig, themeProps, stateType);
            var defaultTheme = getDefaultTheme(cssConfig, stateType);
            var curThemeMeta = (result[stateType] = object_utils_1.deepMerge(defaultTheme, themeMeta));
            var selectors = theme_core_1.filterSelector(themeMeta);
            if (selectors.length > 0) {
                var excludeSelectorMeta_1 = selectors.reduce(function (res, selector) {
                    delete res[selector];
                    return res;
                }, object_utils_1.deepMerge({}, curThemeMeta));
                selectors.forEach(function (selector) {
                    curThemeMeta[selector] = object_utils_1.deepMerge(excludeSelectorMeta_1, curThemeMeta[selector]);
                });
            }
            return result;
        }, { current: {} });
        return stateTypes.reduce(function (result, stateType) {
            var getter = stateType2Getter[stateType];
            var themeMeta = getTargetThemeMeta(cssConfig, themeProps, stateType);
            result[stateType] = getter(themeMeta);
            if (result.themeMeta) {
                result.themeMeta.current = object_utils_1.deepMerge(getDefaultTheme(cssConfig, stateType), result.themeMeta.current, themeMeta);
            }
            return result;
        }, {
            themeMeta: themeMetaForDesign,
        });
    };
}
exports.createGetStyleInThemeMeta = createGetStyleInThemeMeta;
/**
 * 根据配置获取最终计算出最终的结果 可以是CSS或者inline-style
 * @param cssConfig
 * @param props
 * @param opt
 * @param source
 * @return {StateType|*}
 */
function computeFinalThemeOutResult(cssConfig, props, opt, source) {
    var createTranslate = opt.createTranslate, initVal = opt.initVal, reduceResult = opt.reduceResult;
    var themeProps = props.themeProps;
    var themeState = themeProps.themeState;
    var stateTypes = getStateTypes(themeState);
    var _a = themeProps.themeConfig, themeConfig = _a === void 0 ? {} : _a;
    return stateTypes.reduce(function (beforeValue, stateType) {
        var _a = themeConfig, _b = stateType, _c = _a[_b], themeMeta = _c === void 0 ? {} : _c;
        var translate = createTranslate(cssConfig, stateType);
        return reduceResult(beforeValue, translate(themeMeta, themeProps));
    }, initVal);
}
exports.computeFinalThemeOutResult = computeFinalThemeOutResult;
//# sourceMappingURL=common.js.map