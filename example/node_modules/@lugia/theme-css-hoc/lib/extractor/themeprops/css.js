"use strict";
/**
 *
 * create by ligx
 *
 * @flow
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var consts_1 = require("../../consts");
var css_1 = require("../../translate/css");
var styled_components_1 = require("styled-components");
var ramada_1 = require("@lugia/ramada");
var css_2 = require("@lugia/css");
var common_1 = require("./common");
/**
 * 计算CSSConfig中配置getCSS样式
 * @param cssConfig
 * @return {string|(function(CSSProps))}
 */
function createGetCSSInCSSConfig(cssConfig) {
    var _a = cssConfig.normal, normal = _a === void 0 ? {} : _a, _b = cssConfig.hover, hover = _b === void 0 ? {} : _b, _c = cssConfig.active, active = _c === void 0 ? {} : _c, _d = cssConfig.disabled, disabled = _d === void 0 ? {} : _d, _e = cssConfig.focus, focus = _e === void 0 ? {} : _e;
    if (!normal.getCSS &&
        !hover.getCSS &&
        !active.getCSS &&
        !disabled.getCSS &&
        !focus.getCSS) {
        return '';
    }
    return function (props) {
        return common_1.computeFinalThemeOutResult(cssConfig, props, {
            createTranslate: function (translateCssConfig, stateType) {
                if (!translateCssConfig) {
                    return ramada_1.alwaysEmptyString;
                }
                var cssMeta = translateCssConfig[stateType];
                if (!cssMeta) {
                    return ramada_1.alwaysEmptyString;
                }
                var getCSS = cssMeta.getCSS;
                if (!getCSS) {
                    return ramada_1.alwaysEmptyString;
                }
                return getCSS;
            },
            initVal: '',
            reduceResult: getCSSValue,
        }, 'CSSConfig.css');
    };
}
exports.createGetCSSInCSSConfig = createGetCSSInCSSConfig;
/**
 * 计算CSSConfig中配置getStyle返回的样式
 * @param cssConfig
 * @return {function(CSSProps)}
 */
function createGetStyleInCSSConfig(cssConfig) {
    return function (props) {
        return common_1.computeFinalThemeOutResult(cssConfig, props, {
            createTranslate: function (translateCssConfig, stateType) {
                var alwaysEmptyObject = ramada_1.always({});
                if (!translateCssConfig) {
                    return alwaysEmptyObject;
                }
                var cssMeta = translateCssConfig[stateType];
                if (!cssMeta) {
                    return alwaysEmptyObject;
                }
                var getStyle = cssMeta.getStyle;
                if (!getStyle) {
                    return alwaysEmptyObject;
                }
                return getStyle;
            },
            initVal: {},
            reduceResult: getStyleValue,
        }, 'CSSConfig.getStyle');
    };
}
exports.createGetStyleInCSSConfig = createGetStyleInCSSConfig;
/**
 * 获取CSSConfig中配置defaultTheme
 * @param cssConfig
 * @return {(function(CSSProps))|undefined}
 */
function createGetDefaultThemeInCSSConfig(cssConfig) {
    var _a = cssConfig.normal, normal = _a === void 0 ? {} : _a, _b = cssConfig.active, active = _b === void 0 ? {} : _b, _c = cssConfig.disabled, disabled = _c === void 0 ? {} : _c;
    if (!normal.defaultTheme && !active.defaultTheme && !disabled.defaultTheme) {
        return undefined;
    }
    return function (props) {
        return common_1.computeFinalThemeOutResult(cssConfig, props, {
            createTranslate: function (translateCssConfig, stateType) {
                var alwaysEmptyObject = ramada_1.always({});
                if (!translateCssConfig ||
                    stateType === consts_1.Hover ||
                    stateType === consts_1.Focus ||
                    stateType === consts_1.Active ||
                    stateType === consts_1.Disabled) {
                    return alwaysEmptyObject;
                }
                var cssMeta = translateCssConfig[stateType];
                if (!cssMeta) {
                    return alwaysEmptyObject;
                }
                var defaultTheme = cssMeta.defaultTheme;
                if (!defaultTheme) {
                    return alwaysEmptyObject;
                }
                return ramada_1.always(css_1.themeMeta2Style(defaultTheme));
            },
            initVal: {},
            reduceResult: getStyleValue,
        }, 'CSSConfig.defaultTheme');
    };
}
exports.createGetDefaultThemeInCSSConfig = createGetDefaultThemeInCSSConfig;
/**
 * 根据传入的themeMeta2Style的转换器生成对应的CSS字符串
 * @param getStyle
 * @return {(function(CSSProps): *)|undefined}
 */
function createGetCSSByStyleTranslate(getStyle) {
    if (!getStyle) {
        return undefined;
    }
    return function (props) {
        var style = getStyle(props);
        return styled_components_1.css(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n      ", "\n    "], ["\n      ", "\n    "])), css_2.style2css(style));
    };
}
exports.createGetCSSByStyleTranslate = createGetCSSByStyleTranslate;
function getStyleValue(beforeValue, nextValue) {
    return Object.assign({}, beforeValue, nextValue);
}
exports.getStyleValue = getStyleValue;
function getCSSValue(beforeValue, nextValue) {
    return styled_components_1.css(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["", "", ""], ["", "", ""])), beforeValue, nextValue);
}
exports.getCSSValue = getCSSValue;
var templateObject_1, templateObject_2;
//# sourceMappingURL=css.js.map