"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ramada_1 = require("@lugia/ramada");
var object_utils_1 = require("@lugia/object-utils");
var css_1 = require("@lugia/css");
var theme_utils_1 = require("@lugia/theme-utils");
var consts_1 = require("../consts");
var px2remcss = css_1.units.px2remcss;
function getSizeFromTheme(size) {
    if (typeof size === 'number' || !isNaN(Number(size))) {
        return px2remcss(size);
    }
    var dict = theme_utils_1.getDictValue(size);
    return typeof dict === 'number' || !isNaN(Number(dict))
        ? px2remcss(dict)
        : dict;
}
exports.getSizeFromTheme = getSizeFromTheme;
exports.getSpaceFromTheme = function (spaceType, space) {
    var style = {};
    if (typeof space === 'number') {
        space = {
            left: space,
            top: space,
            bottom: space,
            right: space,
        };
    }
    if (space !== undefined) {
        setObjectValueIfValueExist(style, spaceType + "Top", object_utils_1.getAttributeFromObject(space, 'top', 0), getSizeFromTheme);
        setObjectValueIfValueExist(style, spaceType + "Bottom", object_utils_1.getAttributeFromObject(space, 'bottom', 0), getSizeFromTheme);
        setObjectValueIfValueExist(style, spaceType + "Left", object_utils_1.getAttributeFromObject(space, 'left', 0), getSizeFromTheme);
        setObjectValueIfValueExist(style, spaceType + "Right", object_utils_1.getAttributeFromObject(space, 'right', 0), getSizeFromTheme);
    }
    return style;
};
function getBorderStyleFromTheme(border) {
    if (border === 'none') {
        return {
            borderTopWidth: 0,
            borderBottomWidth: 0,
            borderLeftWidth: 0,
            borderRightWidth: 0,
        };
    }
    if (object_utils_1.isEmptyObject(border)) {
        return {};
    }
    if (typeof border === 'string') {
        return;
    }
    var borderTop = object_utils_1.getAttributeFromObject(border, 'top', {});
    var borderBottom = object_utils_1.getAttributeFromObject(border, 'bottom', {});
    var borderLeft = object_utils_1.getAttributeFromObject(border, 'left', {});
    var borderRight = object_utils_1.getAttributeFromObject(border, 'right', {});
    var style = {};
    function setBorderStyle(target, name) {
        if (typeof target === 'string') {
            if (target === 'none') {
                setObjectValueIfValueExist(style, name + "Width", 0, getSizeFromTheme);
            }
            return;
        }
        var borderTopWidth = object_utils_1.getAttributeFromObject(target, 'width');
        setObjectValueIfValueExist(style, name + "Width", borderTopWidth, getSizeFromTheme);
        var borderTopStyle = object_utils_1.getAttributeFromObject(target, 'style');
        setObjectValueIfValueExist(style, name + "Style", borderTopStyle, ramada_1.always(borderTopStyle));
        var borderColor = object_utils_1.getAttributeFromObject(target, 'color');
        setObjectValueIfValueExist(style, name + "Color", borderColor, ramada_1.always(borderColor));
    }
    setBorderStyle(borderTop, 'borderTop');
    setBorderStyle(borderBottom, 'borderBottom');
    setBorderStyle(borderLeft, 'borderLeft');
    setBorderStyle(borderRight, 'borderRight');
    return style;
}
exports.getBorderStyleFromTheme = getBorderStyleFromTheme;
function getBorderRadius(borderRadius) {
    var style = {};
    if (object_utils_1.isEmptyObject(borderRadius)) {
        return style;
    }
    var topLeft = borderRadius.topLeft, topRight = borderRadius.topRight, bottomLeft = borderRadius.bottomLeft, bottomRight = borderRadius.bottomRight;
    function setBorderRadiusIfExist(key, target) {
        if (!target && target !== 0) {
            return;
        }
        setObjectValueIfValueExist(style, key, target, getSizeFromTheme);
    }
    setBorderRadiusIfExist('borderTopLeftRadius', topLeft);
    setBorderRadiusIfExist('borderTopRightRadius', topRight);
    setBorderRadiusIfExist('borderBottomRightRadius', bottomRight);
    setBorderRadiusIfExist('borderBottomLeftRadius', bottomLeft);
    return style;
}
exports.getBorderRadius = getBorderRadius;
function getStringStyleFromTheme(stringStyle) {
    if (!stringStyle || typeof stringStyle !== 'string') {
        return '';
    }
    return theme_utils_1.getDictValue(stringStyle);
}
exports.getStringStyleFromTheme = getStringStyleFromTheme;
function getNumberStyleFromTheme(numberStyle) {
    if (numberStyle && typeof numberStyle === 'number') {
        return numberStyle;
    }
    var dictValue = theme_utils_1.getDictValue(numberStyle);
    return dictValue && typeof dictValue === 'number' ? dictValue : 0;
}
exports.getNumberStyleFromTheme = getNumberStyleFromTheme;
function themeMeta2Style(theme) {
    var border = theme.border, width = theme.width, height = theme.height, font = theme.font, fontSize = theme.fontSize, color = theme.color, opacity = theme.opacity, margin = theme.margin, padding = theme.padding, boxShadow = theme.boxShadow, visibility = theme.visibility, cursor = theme.cursor, lineHeight = theme.lineHeight, borderRadius = theme.borderRadius, overflow = theme.overflow, maxWidth = theme.maxWidth, minWidth = theme.minWidth, minHeight = theme.minHeight, maxHeight = theme.maxHeight;
    var background = theme.background;
    var style = {};
    setObjectValueIfValueExist(style, 'lineHeight', lineHeight, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'fontSize', fontSize, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'width', width, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'height', height, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'minWidth', minWidth, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'maxWidth', maxWidth, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'minHeight', minHeight, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'maxHeight', maxHeight, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'color', color, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'overflow', overflow, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'opacity', opacity, getNumberStyleFromTheme);
    setObjectValueIfValueExist(style, 'boxShadow', boxShadow, theme_utils_1.getBoxShadowCSS);
    setObjectValueIfValueExist(style, 'visibility', visibility, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'cursor', cursor, getStringStyleFromTheme);
    var position = theme.position;
    Object.assign(style, getFont(font), getBackGround(background), border ? getBorderStyleFromTheme(border) : {}, borderRadius ? getBorderRadius(borderRadius) : {}, position ? getPosition(position) : {}, padding ? exports.getSpaceFromTheme('padding', padding) : {}, margin ? exports.getSpaceFromTheme('margin', margin) : {});
    return style;
}
exports.themeMeta2Style = themeMeta2Style;
function getFont(font) {
    var res = {};
    if (!font) {
        return res;
    }
    var style = font.style, weight = font.weight, size = font.size, family = font.family;
    setObjectValueIfValueExist(res, 'fontStyle', style, getStringStyleFromTheme);
    setObjectValueIfValueExist(res, 'fontFamily', family, getStringStyleFromTheme);
    setObjectValueIfValueExist(res, 'fontSize', size, getSizeFromTheme);
    setObjectValueIfValueExist(res, 'fontWeight', weight, getNumberStyleFromTheme);
    return res;
}
exports.getFont = getFont;
// TODO: postion repea 错误
function getBackGround(background) {
    var style = {};
    if (!background) {
        return style;
    }
    if (background === 'none') {
        return { backgroundColor: 'rgb(0,0,0,0)', backgroundImage: 'none' };
    }
    var color = background.color, image = background.image, origin = background.origin, positionX = background.positionX, positionY = background.positionY, repeatX = background.repeatX, repeatY = background.repeatY, size = background.size, clip = background.clip;
    setObjectValueIfValueExist(style, 'backgroundColor', color, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundImage', image, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundOrigin', origin, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundPositionX', positionX, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundPositionY', positionY, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundRepeatX', repeatX, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundRepeatY', repeatY, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundSize', size, getStringStyleFromTheme);
    setObjectValueIfValueExist(style, 'backgroundClip', clip, getStringStyleFromTheme);
    return style;
}
exports.getBackGround = getBackGround;
function getPosition(position) {
    if (!position) {
        return {};
    }
    var style = {};
    var left = position.left, top = position.top, right = position.right, bottom = position.bottom;
    setObjectValueIfValueExist(style, 'left', left, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'top', top, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'right', right, getSizeFromTheme);
    setObjectValueIfValueExist(style, 'bottom', bottom, getSizeFromTheme);
    if (Object.keys(style).length > 0) {
        var _a = position.type, type = _a === void 0 ? 'absolute' : _a;
        style.position = type;
    }
    return style;
}
exports.getPosition = getPosition;
function setObjectValueIfValueExist(style, name, value, cb) {
    if (value || value === 0) {
        style[name] = cb ? cb(value) : value;
    }
}
exports.setObjectValueIfValueExist = setObjectValueIfValueExist;
function getThemeMeta(cssConfig, stateType) {
    return function (theme) {
        if (!theme) {
            return {};
        }
        if (!cssConfig) {
            return theme;
        }
        var config = cssConfig[stateType];
        if (!config) {
            return theme;
        }
        var _a = config.defaultTheme, defaultTheme = _a === void 0 ? {} : _a, selectNames = config.selectNames;
        var selectNameThemeMeta = getSelectNameThemeMeta(theme, selectNames);
        if (stateType === consts_1.Active ||
            stateType === consts_1.Hover ||
            stateType === consts_1.Focus ||
            stateType === consts_1.Disabled) {
            return object_utils_1.deepMerge(defaultTheme, selectNameThemeMeta);
        }
        return selectNameThemeMeta;
    };
}
exports.getThemeMeta = getThemeMeta;
function getSelectNameThemeMeta(theme, selectNames) {
    if (theme === void 0) { theme = {}; }
    if (selectNames === void 0) { selectNames = []; }
    if (object_utils_1.isEmptyObject(theme)) {
        return {};
    }
    if (!selectNames) {
        return theme;
    }
    if (selectNames.length === 0) {
        return {};
    }
    var result = {};
    selectNames.forEach(function (names, i, target) {
        if (typeof names === 'string') {
            names = [names];
            target[i] = names;
        }
        var value = object_utils_1.getAttributeValue(theme, names);
        if (value !== undefined && value !== null) {
            result = object_utils_1.deepMerge(result, object_utils_1.packObject(names, value));
        }
    });
    return result;
}
exports.getSelectNameThemeMeta = getSelectNameThemeMeta;
function translateToCSStyle(cssConfig, stateType) {
    var getThemeMetaByConfig = getThemeMeta(cssConfig, stateType);
    return function (themeMeta) {
        return themeMeta2Style(getThemeMetaByConfig(themeMeta));
    };
}
exports.translateToCSStyle = translateToCSStyle;
//# sourceMappingURL=css.js.map