"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var theme_core_1 = require("@lugia/theme-core");
var theme_core_2 = require("@lugia/theme-core");
exports.addFocusBlurEvent = theme_core_2.addFocusBlurEvent;
exports.addMouseEvent = theme_core_2.addMouseEvent;
function useInitHandle(props, widgetName, opt) {
    var themeConfig = react_1.useContext(theme_core_1.ThemeContext);
    var _a = react_1.useState({}), themeState = _a[0], setThemeState = _a[1];
    var svTarget = react_1.useRef({});
    var handle = react_1.useRef(null);
    if (!handle.current) {
        var initHandleObject = new theme_core_1.ThemeHandle(props, themeConfig, widgetName, themeState, svTarget);
        if (theme_core_1.hasThemeStateEvent(opt)) {
            initHandleObject.hover = false;
            initHandleObject.active = false;
            initHandleObject.focus = false;
        }
        handle.current = initHandleObject;
    }
    handle.current.setProps(props);
    handle.current.setContext(themeConfig);
    return {
        themeConfig: themeConfig,
        themeState: [themeState, setThemeState],
        handle: handle.current,
        svTarget: svTarget,
    };
}
var ThemeProvider = function (Target, widgetName, opt) {
    if (opt === void 0) { opt = { hover: false, active: false, focus: false }; }
    if (Target.displayName === theme_core_1.CSSComponentContainerDisplayName) {
        console.warn('CSSComponent不推荐直接包括ThemeHoc');
    }
    var ThemeWrapWidgetForward = function (props, ref) {
        var _a = useInitHandle(props, widgetName, opt), handle = _a.handle, svTarget = _a.svTarget, themeState = _a.themeState;
        if (ref) {
            if (typeof ref === 'object') {
                ref.current = handle;
            }
            if (typeof ref === 'function') {
                ref(handle);
            }
        }
        react_1.useEffect(function () {
            var mouseupHandler = function () {
                if (handle.active) {
                    handle.toggleActiveState(false);
                }
            };
            document.addEventListener('mouseup', mouseupHandler);
            return function () {
                document.removeEventListener('mouseup', mouseupHandler);
            };
        });
        if ('themeState' in props) {
            var setThemeState = themeState[1];
            var _b = props.themeState, propsThemeState = _b === void 0 ? {} : _b;
            setThemeState(propsThemeState);
        }
        var _c = props.lugiaHidden, lugiaHidden = _c === void 0 ? false : _c;
        return lugiaHidden ? null : (react_1.default.createElement(Target, tslib_1.__assign({ dispatchEvent: handle.dispatchEvent, createEventChannel: handle.createEventChannel }, props, theme_core_1.injectThemeStateEvent(opt, handle), { themeProps: handle.getThemeProps(), getInternalThemeProps: handle.getInternalThemeProps, getPartOfThemeHocProps: handle.getPartOfThemeHocProps, getPartOfThemeConfig: function (partName) {
                return handle.getPartOfThemeConfig(partName, true);
            }, getPartOfThemeProps: handle.getPartOfThemeProps, getTheme: handle.getTheme, getWidgetThemeName: function () { return widgetName; }, getThemeByDisplayName: handle.getThemeByDisplayName, ref: svTarget })));
    };
    var ThemeWrapWidget = react_1.default.forwardRef(ThemeWrapWidgetForward);
    // @ts-ignore
    ThemeWrapWidget.__OrginalWidget__ = Target;
    ThemeWrapWidget.displayName = theme_core_1.packDisplayName(widgetName);
    return ThemeWrapWidget;
};
exports.default = ThemeProvider;
//# sourceMappingURL=index.js.map