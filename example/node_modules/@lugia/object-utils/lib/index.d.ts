/**
 *
 * create by liangguodong on 2018/8/24
 *
 * @flow
 */
import { DeepMergeOption } from './type';
declare type AnyObject = {
    [key: string]: any;
};
export declare function getAttributeFromObject(object: AnyObject, attribute: string, defaultValue?: any): any;
export declare function getKeyfromIndex(data: object[], index: number, expKey: string): string;
export declare function getIndexfromKey(data: AnyObject[], keyName: string, keyValue: string): number;
export declare function deepMerge(...objects: any[]): any;
declare type MergeOption = {
    arrayMerge?: (destinationArray: any[], sourceArray: any[]) => any[];
};
export declare function deepMergeOption(objects: any[], option?: MergeOption): any;
export declare function deepMergeForArrayMerge<T>(...objects: T[]): Partial<T>;
export declare function moveToTargetIfKeyIsInSource(key: string, source: AnyObject, target: AnyObject): void;
export declare function deepMergeAnB<T, U>(objectA: Partial<T>, objectB: Partial<U>, opt: DeepMergeOption): Partial<T & U>;
export declare function isEmptyObject(obj: any): boolean;
export declare function getAttributeValue(obj: object, path: string[]): any;
export declare function setAttributeValue(outResult: AnyObject, paths: string[], val: any): void;
export declare function packPathObject(object: AnyObject): object;
export declare function packObject(path: string[], value: any): object;
export declare function object2pathObject(obj: object): AnyObject;
export declare function diffABWhenAttrIfExist(objA: object, objB: object): string[];
export {};
